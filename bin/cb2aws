#!/bin/sh

# Update ~/.aws/config with clipboard data from https://ei.awsapps.com/start#/
# Update ~/.aws/config with PR's `make show` output

#readonly DEBUG=1
readonly AWS_CONFIG_FILE="${HOME}/.aws/config"

TMPFILE=$(mktemp "${TMPDIR:-/tmp}/${$}.XXXXXX") || exit 201
readonly TMPFILE
trap "rm -f -- '""${TMPFILE}""'" HUP INT PIPE ALRM TERM USR1 USR2 EXIT

_exit() {
	# shellcheck disable=SC3043
	local rc="${1:-1}"
	test "${rc}" -gt 0 2>/dev/null && shift || rc=1
	echo "${*}" >&2
	exit "${rc}"
}

is_aws_keyword() {
	test "_${1}" != _aws_access_key_id || return 0
	test "_${1}" != _aws_secret_access_key || return 0
	test "_${1}" != _aws_session_token || return 0
	return 1
}

##########
## main()
##########
case ${0##*/} in
	pr2aws)
		#     }
		# +   this        = {
		# +       ACCOUNT_ID            = "952894771269"
		# +       AWS_ACCESS_KEY_ID     = "ASIA53XHUKBC3QCGFYMN"
		# +       AWS_SECRET_ACCESS_KEY = "9CFiMXcr2VJH/oD7mxSLirozQ5jbMeYEG43wIGrQ"
		# +       AWS_SESSION_TOKEN     = "FwoGZXIvYXdzELX//////////wEaDAzq0hvDftUNZwdgnyLCATsSP5tNmBgJs59GOg3vHWTkN3nV01AKsfwwaV2OS4kU82c8YWIdAZM0ut10q7ElonWzDCDQqM4AToTxARWzWNXO>
		#     }
		eval "$(sed -rn 's/.*[[:space:]]+((ACCOUNT|AWS)_[_A-Z]+)[[:space:]=]+([^[:space:]]+).*/\1=\3/p')"

		# shellcheck disable=SC2153
		readonly account_id="${ACCOUNT_ID}"
		# shellcheck disable=SC2153
		readonly aws_access_key_id="${AWS_ACCESS_KEY_ID}"
		# shellcheck disable=SC2153
		readonly aws_secret_access_key="${AWS_SECRET_ACCESS_KEY}"
		# shellcheck disable=SC2153
		readonly aws_session_token="${AWS_SESSION_TOKEN}"
		readonly account_suffix='-admin'
		;;
	*)
		if [ -t 0 ]; then
			# shellcheck disable=SC3028
			if [ "${OSTYPE}" != "${OSTYPE#darwin}" ]; then
				pbpaste | tr -d '\r' >"${TMPFILE}"
			else
				xsel --clipboard --nodetach --output | tr -d '\r' >"${TMPFILE}"
			fi
		else # save data from stdin
			tr -d '\r' >"${TMPFILE}"
		fi

		test -z "${DEBUG}" || cat "${TMPFILE}" >&2

		while read -r line || test -n "${line}"; do
			if [ "_${line}" != "_${line#*\[}" ]; then
				account_id="${line%%_*}"
				account_id="${account_id##*[}"
				test "${line%%_ReadOnlyWithSessionManagerAccess*}" = "${line}" || account_suffix='-ssm'
				continue
			fi
			# shellcheck disable=SC2086
			set -- ${line%%=*} ${line#*=}
			test -n "${2}" && is_aws_keyword "${1}" && eval "${1}='${2}'"
		done <"${TMPFILE}"
		;;
esac

if [ -n "${DEBUG}" ]; then
	echo "account_id=${account_id}" >&2
	echo "account_suffix=${account_suffix}" >&2
	echo "aws_access_key_id=${aws_access_key_id}" >&2
	echo "aws_secret_access_key=${aws_secret_access_key}" >&2
	echo "aws_session_token=${aws_session_token}" >&2
fi

test -n "${account_id}" || _exit 'account_id is missing'
test -n "${aws_access_key_id}" || _exit 'aws_access_key_id is missing'
test -n "${aws_secret_access_key}" || _exit 'aws_secret_access_key is missing'

# Workaround for Darwin's bash 3.2.57(1)
printf '' >"${TMPFILE}"
while read -r line; do
	if [ "_${line}" != "_${line##\[profile*\]}" ]; then
		# shellcheck disable=SC2086
		set -- ${line##\[profile*\]*#}
		unset profile
		if [ "_${1}" = "_${account_id}${account_suffix}" ]; then
			profile="${line#\[profile}"
			# shellcheck disable=SC2086
			set -- ${profile%%\]*}
			profile="${1}"
		fi
	elif [ -n "${profile}" ]; then
		# shellcheck disable=SC2086
		set -- ${line%%=*} ${line#*=}
		if is_aws_keyword "${1}" && eval "test -n \"\${${1}}\""; then
			eval "echo \"${1}=\${${1}}\"" >>"${TMPFILE}"
			patched="${patched}${patched:+, }${1}"
			patched_profile="${profile}"
			continue
		fi
	fi
	echo "${line}" >>"${TMPFILE}"
done <"${AWS_CONFIG_FILE}"

test -z "${DEBUG}" || echo "patched=${patched}" >&2

test -n "${patched}" || exit 0
mv -f -- "${AWS_CONFIG_FILE}" "${AWS_CONFIG_FILE}.orig" &&
	mv -f -- "${TMPFILE}" "${AWS_CONFIG_FILE}" &&
	echo "Successfully patched account $(printf '\033[1;33m')${patched_profile}$(printf '\033[0m')${patched_profile:+/}${account_id}${account_suffix} with ${patched}." >&2
