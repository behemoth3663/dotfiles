# shellcheck disable=SC2148
# $FreeBSD: src/share/skel/dot.shrc,v 1.2 1999/08/28 00:21:54 peter Exp $
#
# .shrc - bourne shell startup file
#
# This file will be used if the shell is invoked for interactive use and
# the environment variable ENV is set to this file.
#
# see also sh(1), environ(7).
#

test -n "${O1VM_SUPRESS_SHRC_LOGGING}" || echo '.shrc' >&2

# Uncomment next line to enable the builtin emacs(1) command line editor
# in sh(1), e.g. C-a -> beginning-of-line.
set -o emacs

# some useful aliases
alias h='fc -l'
alias j='jobs'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias n32='/usr/bin/nice -n32'

alias pi='/sbin/ping -n -c5 -s16 -W5000 8.8.8.8'
alias trace='/usr/sbin/traceroute -q1 -n'

case "${OSTYPE}" in
	freebsd*)
		PREFIX='/usr/local'
		GIT="${PREFIX}/bin/git"
		CURL="${PREFIX}/bin/curl"

		# shellcheck disable=SC2139
		test -x "${PREFIX}/bin/doas" && alias sudo="${PREFIX}/bin/doas"

		# shellcheck disable=SC2139
		alias cdd="cd /usr${HOME}/src"
		# shellcheck disable=SC2139
		test -d "/usr${HOME}/src" || alias cdd="cd ${HOME}/src"

		alias gdb='/usr/libexec/gdb'
		alias ss='/usr/bin/sockstat'
		# shellcheck disable=SC2139
		alias sd="sudo ${PREFIX}/bin/deco"
		# shellcheck disable=SC2139
		alias t="${PREFIX}/bin/terraform"
		alias k='kubectl'

		# shellcheck disable=SC2139
		alias pkg_ver="${PREFIX}/sbin/pkg-static version -vL= | /usr/bin/grep --extended-regex --invert-match '[[:space:]]>[[:space:]]|[[:space:]]orphaned[:[:space:]]+local/' | /usr/bin/less --no-init --quit-if-one-screen"
		# shellcheck disable=SC2139
		alias pkg_vers="${PREFIX}/sbin/pkg-static version -vL= | /usr/bin/less --no-init --quit-if-one-screen"
		# shellcheck disable=SC2139
		alias portver="portsnap fetch update && ${PREFIX}/sbin/pkg-static version -vL= | /usr/bin/grep --extended-regex --invert-match '[[:space:]]>[[:space:]]|[[:space:]]orphaned[:[:space:]]+local/'"
		# shellcheck disable=SC2139
		alias portupg="time /usr/bin/nice -n32 ${PREFIX}/sbin/portmaster --no-confirm --no-term-title -Bdgty -x doas -x sudo"
		alias pkgupg="time /usr/bin/nice -n32 ${PREFIX}/sbin/portmaster --no-confirm --no-term-title -Bdty --packages-only --packages-local --local-packagedir=$(make -C / -V PORTSDIR)/packages -x pkg"

		# shellcheck disable=SC2154,SC2139
		alias port_extract='test "${PWD##/usr/ports/*/}" != "${PWD}" && /bin/rm -rf -- Makefile.local && pkg_origin=$(/usr/bin/make -V PKGORIGIN) && test -n "${pkg_origin}" && pkg_pwd="${PWD}" && cd .. && '"${PREFIX}"'/bin/doas /bin/rm -rf -- "${pkg_pwd##*/}" && portsnap extract "${pkg_origin}/" && cd "${pkg_pwd}"'

		alias mkadl='/usr/bin/nice -n32 /usr/bin/make all-depends-list'
		# shellcheck disable=SC2139
		alias mkcfg="${PREFIX}/bin/doas /usr/bin/make config"
		# shellcheck disable=SC2139
		alias mkcfgr="/usr/bin/nice -n32 ${PREFIX}/bin/doas /usr/bin/make config-recursive"
		#alias mkcal="{ WRKDIR=\$(/usr/bin/make -V WRKDIR) && test -d \"\${WRKDIR}\" && /usr/bin/nice -n32 ${PREFIX}/bin/doas /usr/bin/find \"\${WRKDIR}\" -mindepth 2 -maxdepth 2 -name '.*' -uid 0 -exec /usr/sbin/chown -v \$(/usr/bin/id -u) {} \+ && /usr/bin/nice -n32 ${PREFIX}/bin/doas /bin/rm -rf -- \"\${WRKDIR}/pkg\" \"\${WRKDIR}/.metadir\"; set -o pipefail && /usr/bin/time /usr/bin/nice -n32 /usr/bin/make clean all 2>&1 | /usr/bin/tee build.log; }"
		# shellcheck disable=SC2139
		alias mkcal="${PREFIX}/bin/doas /usr/bin/make clean && set -o pipefail && /usr/bin/time /usr/bin/nice -n32 /usr/bin/make all 2>&1 | /usr/bin/tee build.log"
		# shellcheck disable=SC2139
		alias instpc="/usr/bin/nice -n32 ${PREFIX}/bin/doas /usr/bin/make package deinstall install clean"
		alias zfsget='/sbin/zfs get mountpoint,canmount,mounted,checksum,compression,compressratio,dedup,atime,devices,exec,setuid,xattr,readonly,primarycache,secondarycache,logbias,sync,volsize,volblocksize'
		alias kldsize='echo $(($(kldstat | sed -rn "s/^[[:space:]]*[[:digit:]].*[[:space:]]([[:xdigit:]]+)[[:space:]]+[^[:space:]]+[[:space:]]*\$/+0x\1/p")))'
		alias sh_='exec /bin/sh'

		alias mk_venv='python -m venv env --system-site-packages --symlinks --prompt "\[\033[1;33m\]${PWD##*/}\[\033[0m\]" && source env/bin/activate && pip install --upgrade --quiet --progress-bar off pip setuptools'
		alias mk_venv3.9='python3.9 -m venv env --prompt "\[\033[1;32m\]${PWD##*/}\[\033[0m\]" && source env/bin/activate'
		alias activate='test -s env/bin/activate && . env/bin/activate'
		alias pip_upgrade="test -z \"\${VIRTUAL_ENV}\" || pip list --outdated --format=freeze | sed -rn -e '/^(-e|evdev|spyder|isort|lazy-object-proxy)/d' -e 's/=.*//p' | xargs pip install --upgrade"
		alias pip_upgrade_list="test -z \"\${VIRTUAL_ENV}\" || pip list --outdated --format=freeze | sed -rn -e '/^-e/d'"

		#alias jmail="${PREFIX}/bin/doas /usr/sbin/jexec mail /usr/bin/su -l ${USER}"
		#alias hast1="${PREFIX}/bin/doas /sbin/hastctl status -c /etc/hast1.conf"
		#alias hast2="${PREFIX}/bin/doas /sbin/hastctl status -c /etc/hast2.conf"
		#if [ -n "${BASH}" ] && [ -x /usr/local/bin/starship ]; then
		#	# shellcheck disable=SC1090
		#	source <(/usr/local/bin/starship init bash --print-full-init)
		#fi
		;;
	darwin*)
		PREFIX='/opt/homebrew'
		GIT='/usr/bin/git'
		CURL='/usr/bin/curl'
		export LANG='en_GB.UTF-8'

		if [ -x '/opt/local/bin/doas' ]; then
			alias sudo='/opt/local/bin/doas'
			alias sd='/opt/local/bin/doas /opt/local/bin/mc'
		else
			alias doas='/usr/bin/sudo'
			alias sd='/usr/bin/sudo /opt/local/bin/mc'
		fi

		JAVA_HOME="${PREFIX}/opt/java"
		test -x "${JAVA_HOME}/bin/java" && export JAVA_HOME &&
			export PATH="${PATH%%:/usr/bin:*}:${JAVA_HOME}/bin:/usr/bin:${PATH##*:/usr/bin:}"

		# Atlassian Command Line Interface (CLI)
		# https://marketplace.atlassian.com/apps/10886/atlassian-command-line-interface-cli
		test -x "${HOME}/ACLI/acli" && export COLUMNS='120' # && export PATH="${PATH}:${HOME}/ACLI"

		GROOVY_HOME="${PREFIX}/opt/groovy/libexec"
		test -x "${GROOVY_HOME}/bin/groovy" && export GROOVY_HOME

		# shellcheck disable=SC2139
		alias cdd="cd ${HOME}/src"
		alias k='/opt/homebrew/bin/kubectl'
		alias ldd='/usr/bin/otool -L'
		alias make='/opt/homebrew/bin/bmake'
		alias t='/opt/homebrew/bin/terraform'
		# shellcheck disable=SC2142,SC2154
		alias ips='networksetup -listallhardwareports | while read -r s; do
			ss="${s#* Port: }"
			test "${s}" = "${ss}" || ! name="${ss% Adapter *}" || continue
			ss="${s#Device: }"
			test "${s}" != "${ss}" || continue
			ip=$(ipconfig getifaddr "${ss}") || continue
			test -n "${ip}" || continue
			hw=$(networksetup -getmacaddress "${ss}")
			test -n "${hw}" && hw="${hw% (*}" && hw="${hw##* }"
			unset dns
			for i in $(sed -rn "s/^[[:space:]]*nameserver[[:space:]]+([^[:space:]]+).*/\1/p" /etc/resolv.conf); do
				dns="${dns}${dns:+,}${i}"
			done
			rtr=$(netstat -rnfinet | awk "\$1 == \"default\" && \$4 == \"${ss}\" {
				printf(\" >> %s${dns:+ DNS:${dns}}%s\", \$2, index(\$3, \"I\") > 0 ? \"\" : \" (\033[1m*\033[0m)\")
			}")
			echo "${ss}: ${hw:+${hw} }${ip} (${name})${rtr}"
		done'
		;;
	linux*)
		PREFIX='/home/linuxbrew/.linuxbrew'
		GIT='/usr/bin/git'
		CURL='/usr/bin/curl'

		alias doas='/usr/bin/sudo'
		alias sd='/usr/bin/sudo /usr/bin/mc'
		;;
esac

alias m='/usr/bin/less --no-init --chop-long-lines --RAW-CONTROL-CHARS'
if [ -x "${PREFIX}/bin/bat" ]; then
	# shellcheck disable=SC2139
	alias m="${PREFIX}/bin/bat --pager '/usr/bin/less --no-init --chop-long-lines --RAW-CONTROL-CHARS' --theme=ansi --plain --wrap never"
	# shellcheck disable=SC2139
	alias cat="${PREFIX}/bin/bat --pager '/usr/bin/less --no-init --chop-long-lines --RAW-CONTROL-CHARS --quit-if-one-screen' --theme=ansi --plain"
fi

# shellcheck disable=SC2139
alias l="${PREFIX}/bin/exa --long --group-directories-first --bytes"
test -x "${PREFIX}/bin/exa" || alias l='/bin/ls -lGp'

# shellcheck disable=SC2139
alias tmux="${PREFIX}/bin/tmux attach || ${PREFIX}/bin/tmux new"
# shellcheck disable=SC2139
alias weather="${CURL} http://wttr.in/Vyshhorod"

# shellcheck disable=SC2139
alias giadd="${GIT} add"
# shellcheck disable=SC2139
alias gibra="${GIT} branch --show-current"
# shellcheck disable=SC2139
alias gibras="/usr/bin/env GIT_PAGER='${GIT_PAGER:-${PAGER:-/usr/bin/less}} --quit-if-one-screen' ${GIT} branch --verbose --all"
# shellcheck disable=SC2139
alias giche="${GIT} checkout"
# shellcheck disable=SC2139
#alias gichem="${GIT}"' checkout $('"${GIT}"' branch | sed -r -e "/^[[:space:]*]+(main|master)$/!d" -e "s/^[[:space:]*]+//" -eq)'
alias gichem="${GIT}"' checkout $('"${GIT}"' --no-pager branch --no-color --list main master | sed -rn "s/^\*?[[:space:]]+//p;q")'
# shellcheck disable=SC2139
alias gicam="${GIT} commit --verbose --all --message"
# shellcheck disable=SC2139
alias gigog="${GIT}"' log --graph --abbrev-commit --decorate --all --format=format:"%C(bold blue)%H%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)"'
# shellcheck disable=SC2139
alias gilog="${GIT}"' log --graph --pretty=format:"%C(bold blue)%h %C(dim cyan)%ai %C(bold green)%ae%C(reset) %s %C(dim yellow)%d"'
#alias gilog='${GIT} log --graph --pretty=format:"%C(bold blue)%h%C(dim white) [%C(bold cyan)%ai%C(dim white)] <%C(bold green)%ae%C(dim white)>%C(reset) %s"'
#alias gilog='${GIT} log --graph --pretty=format:"%h [%ai] <%ae> %s"'
#log --graph --pretty=format:'%Cred%h %C(green)%t %Creset %C(red)%ad %Creset-%C(yellow)%d%Creset %s %n      %N %-GG' --date=short
# shellcheck disable=SC2139
alias gils="${GIT} ls-files"
# shellcheck disable=SC2139
alias girebi="${GIT} rebase -i"
# shellcheck disable=SC2139
alias girebi2="${GIT} rebase -i HEAD~2"
alias gireup="${GIT} fetch origin && ${GIT}"' rebase origin/$('"${GIT}"' --no-pager branch --no-color --list main master | sed -rn "s/^\*?[[:space:]]+//p;q")'
# shellcheck disable=SC2139
alias gista="${GIT} status --short --branch --untracked-files=no"
# shellcheck disable=SC2139
alias gdiff="${GIT} diff"
# shellcheck disable=SC2139
alias gfetch="${GIT}"' checkout $('"${GIT}"' --no-pager branch --no-color --list main master | sed -rn "s/^\*?[[:space:]]+//p;q")'" && ${GIT} fetch --all --append --prune && ${GIT} pull --all"
# shellcheck disable=SC2139
alias gpull="${GIT} pull --verbose --all"
# shellcheck disable=SC2139
alias gpush="${GIT} push --verbose --all --set-upstream --follow-tags origin"
# shellcheck disable=SC2139
alias gpushtag="${GIT} push --verbose --tags origin"
# shellcheck disable=SC2139
alias gpullbra="${GIT}"' pull --verbose origin $('"${GIT}"' branch --show-current)'
# shellcheck disable=SC2139
alias gpushbra="${GIT}"' push --verbose --set-upstream origin $('"${GIT}"' branch --show-current)'
# shellcheck disable=SC2139
alias girem="${GIT} remote --verbose"
# shellcheck disable=SC2139
alias giremshow="${GIT} remote --verbose show origin"
# shellcheck disable=SC2139
alias gitags="${GIT} ls-remote --tags origin"

md() {
	test -n "${1}" || ! echo "${PWD}" || return 1
	# shellcheck disable=SC2164
	/bin/mkdir -p "${1}" && cd "${1}"
}

cdiff() {
	# shellcheck disable=SC2048,SC2086
	test -z "${1}" || "${PREFIX}/bin/colordiff" --text --minimal -uw ${*} |
		/usr/bin/less --no-init --chop-long-lines --RAW-CONTROL-CHARS
}

pdiff() {
	# можно дополнить поиском *.orig в текущей директории при пустом ${1}
	test -n "${1}" || return 1

	local from to args='-udp'
	while [ -n "${1}" ]; do
		args="${args}${from:+ }${from}"
		from="${to}"
		to="${1}"
		shift
	done

	test -n "${from}" || from="${to}.orig"

	# shellcheck disable=SC2086
	/usr/bin/env TZ=UTC /usr/bin/diff ${args} ${from} ${to} | /usr/bin/sed -e '/^---/s|\.[0-9]* +0000$| UTC|' -e '/^+++/s|\([[:blank:]][-0-9:.+]*\)*$||'
}

gibradel() {
	while [ -n "${1}" ]; do
		test "${1}" != "$(git branch --show-current)" ||
			git checkout "$(
				git --no-pager branch --no-color --list main master | sed -rn 's/^\*?[[:space:]]+//p;q'
			)"
		git branch --delete --force "${1}"
		git push origin --delete "${1}"
		shift
	done
}

gicd() {
	local d
	# shellcheck disable=SC2164
	d=$(git rev-parse --show-toplevel) && cd "${d}"
}

pkg_ls_bin() {
	# можно дополнить автоматическим определением директории порта по /usr/ports/* при пустом ${1}
	local p pkgs pkg_name
	if [ -z "${1}" ]; then
		# shellcheck disable=SC2295
		if [ "${PWD#$(make -V PORTSDIR)/}" = "${PWD}" ]; then
			echo "Package name cannot be found (rc=201)." >&2
			return 201
		fi

		# shellcheck disable=SC2016
		pkg_name=$(make -v '${PKGNAMEPREFIX}${PORTNAME}${PKGNAMESUFFIX}')
		if [ -z "${pkg_name}" ]; then
			echo "Package name cannot be found (rc=202)." >&2
			return 202
		fi
	fi

	# shellcheck disable=SC2048
	for p in ${*:-${pkg_name}}; do
		p=$("${PREFIX}/sbin/pkg-static" query --evaluate "%n ~ *${p}*" '%n') &&
			test -n "${p}" && pkgs="${pkgs} ${p}"
	done
	if [ -z "${pkgs}" ]; then
		echo "Package(s) \"${*}\" not found." >&2
		return 203
	fi

	# shellcheck disable=SC2086
	pkgs=$("${PREFIX}/sbin/pkg-static" query '%Fp' ${pkgs} |
		/usr/bin/xargs /usr/bin/file |
		/usr/bin/sed -rn 's/([^:]+):[[:space:]]+ELF[[:space:]].*/\1/p')
	if [ -z "${pkgs}" ]; then
		echo "Binaries within package(s) \"${*}\" not found." >&2
		return 204
	fi

	# shellcheck disable=SC2086
	/usr/bin/env LC_TIME='en_US.UTF-8' /bin/ls -lSG ${pkgs}
}

ll() {
	if [ -x "${PREFIX}/bin/exa" ]; then
		# shellcheck disable=SC2048,SC2086
		"${PREFIX}/bin/exa" --all --long --group-directories-first --bytes --links --group --time-style long-iso --color always ${*} |
			/usr/bin/less --no-init --chop-long-lines --RAW-CONTROL-CHARS --quit-if-one-screen
	else
		# shellcheck disable=SC2048,SC2086
		/bin/ls -laGTop ${*}
	fi
}

i() {
	# shellcheck disable=SC2048,SC2086
	/usr/bin/grep --extended-regexp --ignore-case --color=always ${*} |
		/usr/bin/less --no-init --chop-long-lines --RAW-CONTROL-CHARS --quit-if-one-screen
}

puthash() {
	local file="${1:-.}" terraform_source modules_directory git_root curdir hash new_terraform_source

	if [ -d "${file}" ]; then
		while [ "${file}" != "${file%/}" ]; do file="${file%/}"; done
		file="${file}/terragrunt.hcl"
	fi

	terraform_source=$(hcledit --file "${file}" attribute get terraform.source) || return 201
	test -n "${terraform_source}" || return 202

	#"github.com/Aer-Lingus/infrastructure-modules//genstats/tasks?ref=v0.272.67" -> infrastructure-modules
	modules_directory=$(echo "${terraform_source}" | sed -rn 's|.*/([^/]+)//.*|\1|p') || return 203 #'
	git_root=$(git rev-parse --show-toplevel) || return 204

	curdir="$(pwd)"
	if ! cd "${git_root}/../${modules_directory}" 2>/dev/null; then
		while [ -n "${modules_directory}" ]; do
			modules_directory="${modules_directory#?}"
			test -d "${git_root}/../${modules_directory}" && break
		done
		test -n "${modules_directory}" || return 205
		cd "${git_root}/../${modules_directory}" || return 206
	fi

	hash=$(git --no-pager log --no-color --max-count=1 --pretty=%h) || return 207
	cd "${curdir}" || return 208
	test -n "${hash}" || return 209

	new_terraform_source=$(echo "${terraform_source}" | sed -rn "s|(.*\?ref=)([^[:space:]\"]+)(.*)|\1${hash}\3|p") || return 210 #"
	test -n "${new_terraform_source}" || return 211

	test "${terraform_source}" != "${new_terraform_source}" &&
		hcledit --file "${file}" --update attribute set terraform.source "${new_terraform_source}" &&
		echo "${hash}" >&2
}

gfixup() {
	local branch hash

	branch="$(git --no-pager branch --no-color --show-current)"
	test -n "${branch}" || return 201

	hash="$(git --no-pager log --no-color --max-count=1 --pretty=%h ${branch})"
	test -n "${hash}" || return 202

	branch="$(git --no-pager branch --no-color --list main master | sed -rn 's/^\*?[[:space:]]+//p;q')"
	test -n "${branch}" || return 203

	hash="$(git --no-pager cherry ${branch} | sed 's/.*[[:space:]]//;q')"
	test -n "${hash}" || hash="$(git --no-pager rev-parse --short HEAD)" || return 204
	test -n "${hash}" || return 205

	git --no-pager reset --soft "${hash}" && git --no-pager commit --all --amend --no-edit
}

getag() {
	local main_branch hash
	main_branch="$(git --no-pager branch --no-color --list main master | sed -rn 's/^\*?[[:space:]]+//p;q')"
	test -n "${main_branch}" || return 201

	hash=$(git --no-pager log --max-count=1 --pretty=%h --invert-grep --extended-regexp --grep='\[(ci[[:space:]]+skip|skip[[:space:]]+ci)\]' "${main_branch}" -- "${1:-.}") || return 203 #'
	test -n "${hash}" || return 202

	git tag --contains "${hash}" --sort version:refname | sed -r '/^v[[:digit:].]+$/!d;q'
}

unset CURL

#git log --name-only?
#portver() {
#	local o origins old_pwd="${PWD}"
#	cd /usr/ports || return 1
#	origins=$(${GIT} pull origin main | /usr/bin/sed -rn 's,^[[:space:]]+([^[:space:]/]+/[^[:space:]/]+).*,\1,p' | /usr/bin/sort -u) || return 2 #'
#	if [ -s "$(/usr/bin/make -V INDEXDIR)/$(/usr/bin/make -V INDEXFILE)" ]; then
#		for o in ${origins}; do
#			test "_$(${PREFIX}/sbin/pkg-static query -e "%o = ${o}" '%k')" = '_0' || continue
#			/usr/bin/make index || return 3
#			break
#		done
#	else
#		/usr/bin/make index || return 3
#	fi
#	${PREFIX}/sbin/pkg-static version -vL= | /usr/bin/grep -Ev '[[:space:]]>[[:space:]]|[[:space:]]orphaned[:[:space:]]+local/'
#	cd "${old_pwd}"
#}
